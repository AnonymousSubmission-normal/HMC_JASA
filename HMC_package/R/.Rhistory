?HMC
??HMC
library()HMC
library(HMC)
?HMC
??HMC
version(HMC)
collect_active_features_proj
# Clean up environment
rm(list = ls())
# Load development tools
library(devtools)
# Define package path
pkg_path <- "/Users/tianyuzhang/Documents/HMC/HMC_package"
# Step 1: Document package (generate NAMESPACE and man/)
document(pkg_path)
# Step 2: Build source tar.gz (optional if you're just installing locally)
build(pkg_path)
# Step 3: Install the package from source
# install(pkg_path)
check(pkg = pkg_path, args = "--as-cran")
install(pkg_path)
# Step 4: Load the package
library(HMC)
normalize_and_split <- function(df1, df2, df3 = NULL) {
# Combine dataframes
if (is.null(df3)) {
combined <- rbind(df1, df2)
} else {
combined <- rbind(df1, df2, df3)
}
# Compute pooled mean and SD
pooled_mean <- colMeans(combined)
pooled_sd <- apply(combined, 2, sd)
# Center and scale
normalized <- scale(combined, center = pooled_mean, scale = pooled_sd)
# Split back
df1_norm <- normalized[1:nrow(df1), , drop = FALSE]
df2_norm <- normalized[(nrow(df1) + 1):(nrow(df1) + nrow(df2)), , drop = FALSE]
if (is.null(df3)) {
return(list(df1 = df1_norm, df2 = df2_norm))
} else {
df3_norm <- normalized[(nrow(df1) + nrow(df2) + 1):nrow(combined), , drop = FALSE]
return(list(df1 = df1_norm, df2 = df2_norm, df3 = df3_norm))
}
}
# Create sample data
set.seed(42)
df1 <- data.frame(A = rnorm(5, mean = 1), B = rnorm(5, mean = 2))
df2 <- data.frame(A = rnorm(5, mean = 3), B = rnorm(5, mean = 4))
df3 <- data.frame(A = rnorm(5, mean = 5), B = rnorm(5, mean = 6))
# Test with two data frames
res2 <- normalize_and_split(df1, df2)
cat("Testing with two data frames:\n")
print(res2)
# Test with three data frames
res3 <- normalize_and_split(df1, df2, df3)
cat("\nTesting with three data frames:\n")
print(res3)
# Sanity check: All normalized columns should have mean ~0 and sd ~1 when pooled
pooled <- rbind(res3$df1, res3$df2, res3$df3)
cat("\nColumn means (should be ~0):\n")
print(colMeans(pooled))
# Sanity check: All normalized columns should have mean ~0 and sd ~1 when pooled
pooled <- rbind(res3$df1, res3$df2, res3$df3)
cat("\nColumn means (should be ~0):\n")
print(colMeans(pooled))
cat("Column SDs (should be ~1):\n")
print(apply(pooled, 2, sd))
# Create sample data
set.seed(42)
df1 <- data.frame(A = rnorm(5, mean = 1), B = rnorm(5, mean = 2))
df2 <- data.frame(A = rnorm(5, mean = 3), B = rnorm(5, mean = 4))
df3 <- data.frame(A = rnorm(5, mean = 5), B = rnorm(5, mean = 6))
pooled_before <- rbind(df1, df2, df3)
cat("\nColumn means (should be ~0):\n")
print(colMeans(pooled))
cat("Column SDs (should be ~1):\n")
print(apply(pooled, 2, sd))
print(colMeans(pooled_before))
# Create sample data
set.seed(42)
df1 <- data.frame(A = rnorm(5, mean = 1), B = rnorm(5, mean = 2))
df2 <- data.frame(A = rnorm(5, mean = 3), B = rnorm(5, mean = 4))
df3 <- data.frame(A = rnorm(5, mean = 5), B = rnorm(5, mean = 6))
pooled_before <- rbind(df1, df2, df3)
cat("\nColumn means (should be ~0):\n")
print(colMeans(pooled_before))
cat("Column SDs (should be ~1):\n")
print(apply(pooled_before, 2, sd))
res2 <- normalize_and_split(df1, df2)
cat("Testing with two data frames:\n")
print(res2)
# Test with three data frames
res3 <- normalize_and_split(df1, df2, df3)
cat("\nTesting with three data frames:\n")
print(res3)
# Sanity check: All normalized columns should have mean ~0 and sd ~1 when pooled
pooled <- rbind(res3$df1, res3$df2, res3$df3)
cat("\nColumn means (should be ~0):\n")
print(colMeans(pooled))
cat("Column SDs (should be ~1):\n")
print(apply(pooled, 2, sd))
rm(list = ls())
work_directory <- '/Users/tianyuzhang/Documents/convergence_risk_gene/try_Cleary_data/'
clustering_file <- glue(work_directory, "data/module_list_df_2000_genes.csv")
clustering <- data.table(read.csv(clustering_file))
work_directory <- '/Users/tianyuzhang/Documents/convergence_risk_gene/try_Cleary_data/'
# library(glue)
library(data.table)
library(glue)
library(data.table)
clustering_file <- glue(work_directory, "data/module_list_df_2000_genes.csv")
clustering <- data.table(read.csv(clustering_file))
clustering$gene_name <- gsub("\\.", "-", clustering$gene_name)
clustering_file <- glue(work_directory, "data/module_list_df_2000_genes.csv")
clustering <- data.table(read.csv(clustering_file))
clustering
mt_genes <- clustering[grepl("^MT-", gene_name), ]
mt_genes
clustering_file <- glue(work_directory, "data/module_list_df_2000_genes.csv")
clustering <- data.table(read.csv(clustering_file))
clustering <- clustering[cluster_index != 42, ]
clustering
library(glue)
library(data.table)
rm(list = ls())
work_directory <- '/Users/tianyuzhang/Documents/convergence_risk_gene/try_Cleary_data/'
clustering_file <- glue(work_directory, "data/module_list_df_2000_genes.csv")
clustering <- data.table(read.csv(clustering_file))
clustering <- clustering[cluster_index != 42, ]
output_file <- glue("{work_directory}data/module_list_df_2000_genes_no_MTmodule.csv")
fwrite(clustering, output_file)
rm(list = ls())
library(glue)
work_directory <- '/Users/tianyuzhang/Documents/convergence_risk_gene/try_Cleary_data/'
residual_subset <- readRDS(glue(work_directory, 'data/intermediate_data/residual_matrix_all_in_paper.rds'))
clustering_file <- glue(work_directory, "data/module_list_df_2000_genes.csv")
clustering <- data.table(read.csv(clustering_file))
rm(list = ls())
library(glue)
work_directory <- '/Users/tianyuzhang/Documents/convergence_risk_gene/try_Cleary_data/'
residual_subset <- readRDS(glue(work_directory, 'data/intermediate_data/residual_matrix_all_in_paper.rds'))
clustering_file <- glue(work_directory, "data/module_list_df_2000_genes.csv")
clustering <- data.table(read.csv(clustering_file))
MT_module_gens <- clustering[cluster_index == 42, ]$gene_name
MT_module_gens
residual_subset <- residual_subset[, !..MT_module_gens]
residual_subset
rm(list = ls())
library(glue)
work_directory <- '/Users/tianyuzhang/Documents/convergence_risk_gene/try_Cleary_data/'
residual_subset <- readRDS(glue(work_directory, 'data/intermediate_data/residual_matrix_all_in_paper.rds'))
residual_subset <- data.table(residual_subset)
colnames(residual_subset) <- gsub("\\.", "-", colnames(residual_subset))
clustering_file <- glue(work_directory, "data/module_list_df_2000_genes.csv")
clustering <- data.table(read.csv(clustering_file))
clustering$gene_name <- gsub("\\.", "-", clustering$gene_name)
MT_module_gens <- clustering[cluster_index == 42, ]$gene_name
residual_subset <- residual_subset[, !..MT_module_gens]
residual_subset
dim(residual_subset)
MT_module_gens
clustering[cluster_index != 42, ]
names(residual_subset)[1:5]
rm(list = ls())
library(glue)
work_directory <- '/Users/tianyuzhang/Documents/convergence_risk_gene/try_Cleary_data/'
residual_subset <- readRDS(glue(work_directory, 'data/intermediate_data/residual_matrix_all_in_paper.rds'))
residual_subset <- data.table(residual_subset)
colnames(residual_subset) <- gsub("\\.", "-", colnames(residual_subset))
clustering_file <- glue(work_directory, "data/module_list_df_2000_genes.csv")
clustering <- data.table(read.csv(clustering_file))
clustering$gene_name <- gsub("\\.", "-", clustering$gene_name)
MT_module_gens <- clustering[cluster_index == 42, ]$gene_name
residual_subset <- residual_subset[, !..MT_module_gens]
saveRDS(residual_subset,
glue(work_directory, 'data/intermediate_data/residual_matrix_all_in_paper_no_MTmodule.rds'))
message('this code is similar to 51_systematic_process....')
message('the MT module, module 42, is removed')
message('and I used standardized genes to perform the convergence analysis')
message('this code is similar to 51_systematic_process....')
message('the MT module, module 42, is removed')
message('and I used standardized genes to perform the convergence analysis')
library(glue)
library(data.table)
library(grpreg)
library(HMC)
library(doParallel)
library(foreach)
rm(list = ls())
work_directory <- '/Users/tianyuzhang/Documents/convergence_risk_gene/try_Cleary_data/'
source(glue(work_directory, 'R/convergence.R'))
residual_subset <- readRDS(glue(work_directory, 'data/intermediate_data/residual_matrix_all_in_paper_no_MTmodule.rds'))
# hist(table(residual_subset[Guides_collapsed_by_gene!= 'non-targeting']$Guides_collapsed_by_gene), breaks = 100)
# length(unique(residual_subset$Guides_collapsed_by_gene))
residual_subset <- residual_subset[, -c("ID", "Cell_cycle_phase")]
residual_subset <- data.table(residual_subset)
colnames(residual_subset) <- gsub("\\.", "-", colnames(residual_subset))
clustering_file <- glue(work_directory, "data/module_list_df_2000_genes_no_MTmodule.csv")
clustering <- data.table(read.csv(clustering_file))
clustering$gene_name <- gsub("\\.", "-", clustering$gene_name)
residual_subset
clustering
library(ggplot2)
library(argminCS)
install.packages(argminCS)
install.packages("argminCS")
devtools::install_github("xu3cl4/argminCS")
library(ggplot2)
library(argminCS)
work_directory <- '/Users/tianyuzhang/Documents/Argmin_confidence_set/normality_without_LOO3/'
all_result <- data.frame()
sample_size <- 1e2
dimension <- 50
my_lambda <- sqrt(sample_size)
# /(log(sample_size)* sqrt(log(dimension)))
true_mean <- c(rep(0,dimension))
true_covariance <- diag(1, length(true_mean))
set.seed(1)
for(repeat_index in 1:1e3){
my_data <- MASS::mvrnorm(sample_size,
mu = true_mean,
Sigma = true_covariance)
col_means <- colMeans(my_data)
my_weight <- exp(-my_lambda * col_means)[2:length(true_mean)]
my_weight <- my_weight/sum(my_weight)
my_w <- matrix(c(1, - my_weight), ncol = 1)
my_summand <- my_data %*% my_w
test_stat <- sqrt(sample_size) * mean(my_summand) / sd(my_summand)
test_result <- argmin.HT(my_data, 1, method='NS', lambda = my_lambda)
test_stat <- test_result$test.stat.scale
all_result <- rbind(all_result,
data.frame(test_stat = test_stat,
repeat_index = repeat_index,
method = 'weighted'))
test_result <- argmin.HT(my_data, 1, method='HML')
all_result <- rbind(all_result,
data.frame(test_stat = test_result$test.stat.scale,
repeat_index = repeat_index,
method = 'split'))
test_result <- argmin.HT(my_data, 1, method='SML', lambda = my_lambda)
all_result <- rbind(all_result,
data.frame(test_stat = test_result$test.stat.scale,
repeat_index = repeat_index,
method = 'weighted+split'))
}
my_data <- MASS::mvrnorm(sample_size,
mu = true_mean,
Sigma = true_covariance)
col_means <- colMeans(my_data)
my_weight <- exp(-my_lambda * col_means)[2:length(true_mean)]
my_weight <- my_weight/sum(my_weight)
my_w <- matrix(c(1, - my_weight), ncol = 1)
my_summand <- my_data %*% my_w
test_stat <- sqrt(sample_size) * mean(my_summand) / sd(my_summand)
test_result <- argmin.HT(my_data, 1, method='NS', lambda = my_lambda)
test_stat <- test_result$test.stat.scale
all_result <- rbind(all_result,
data.frame(test_stat = test_stat,
repeat_index = repeat_index,
method = 'weighted'))
test_result <- argmin.HT(my_data, 1, method='HML')
all_result <- rbind(all_result,
data.frame(test_stat = test_result$test.stat.scale,
repeat_index = repeat_index,
method = 'split'))
test_result <- argmin.HT(my_data, 1, method='SML', lambda = my_lambda)
?argmin.HT
library(ggplot2)
library(argminCS)
work_directory <- '/Users/tianyuzhang/Documents/Argmin_confidence_set/normality_without_LOO3/'
all_result <- data.frame()
sample_size <- 1e2
dimension <- 50
my_lambda <- sqrt(sample_size)
# /(log(sample_size)* sqrt(log(dimension)))
true_mean <- c(rep(0,dimension))
true_covariance <- diag(1, length(true_mean))
set.seed(1)
rm(list = ls())
library(ggplot2)
library(argminCS)
work_directory <- '/Users/tianyuzhang/Documents/Argmin_confidence_set/91_color_blind_motivation/'
all_result <- data.frame()
sample_size <- 1e2
dimension <- 50
my_lambda <- sqrt(sample_size)
# /(log(sample_size)* sqrt(log(dimension)))
true_mean <- c(rep(0,dimension))
true_covariance <- diag(1, length(true_mean))
set.seed(1)
?argmin.HT
for(repeat_index in 1:1e3){
my_data <- MASS::mvrnorm(sample_size,
mu = true_mean,
Sigma = true_covariance)
col_means <- colMeans(my_data)
my_weight <- exp(-my_lambda * col_means)[2:length(true_mean)]
my_weight <- my_weight/sum(my_weight)
my_w <- matrix(c(1, - my_weight), ncol = 1)
my_summand <- my_data %*% my_w
test_stat <- sqrt(sample_size) * mean(my_summand) / sd(my_summand)
test_result <- argmin.HT(my_data, 1, method='NS', lambda = my_lambda)
test_stat <- test_result$test.stat.scale
all_result <- rbind(all_result,
data.frame(test_stat = test_stat,
repeat_index = repeat_index,
method = 'weighted'))
test_result <- argmin.HT(my_data, 1, method='HML')
all_result <- rbind(all_result,
data.frame(test_stat = test_result$test.stat.scale,
repeat_index = repeat_index,
method = 'split'))
test_result <- argmin.HT(my_data, 1, method='softmin.LOO', lambda = my_lambda)
all_result <- rbind(all_result,
data.frame(test_stat = test_result$test.stat.scale,
repeat_index = repeat_index,
method = 'weighted+split'))
}
test_result <- argmin.HT(my_data, 1, method='HML')
all_result <- rbind(all_result,
data.frame(test_stat = test_result$test.stat.scale,
repeat_index = repeat_index,
method = 'split'))
all_result
test_result <- argmin.HT(my_data, 1, method='SML', lambda = my_lambda)
test_result
test_result <- argmin.HT(my_data, 1, lambda = my_lambda)
my_data <- MASS::mvrnorm(sample_size,
mu = true_mean,
Sigma = true_covariance)
col_means <- colMeans(my_data)
my_weight <- exp(-my_lambda * col_means)[2:length(true_mean)]
my_weight <- my_weight/sum(my_weight)
my_w <- matrix(c(1, - my_weight), ncol = 1)
my_summand <- my_data %*% my_w
test_stat <- sqrt(sample_size) * mean(my_summand) / sd(my_summand)
test_result <- argmin.HT(my_data, 1, method='NS', lambda = my_lambda)
test_stat <- test_result$test.stat.scale
all_result <- rbind(all_result,
data.frame(test_stat = test_stat,
repeat_index = repeat_index,
method = 'weighted'))
test_result <- argmin.HT(my_data, 1, method='HML')
all_result <- rbind(all_result,
data.frame(test_stat = test_result$test.stat.scale,
repeat_index = repeat_index,
method = 'split'))
test_result <- argmin.HT(my_data, 1, method='SML', lambda = my_lambda)
all_result <- rbind(all_result,
data.frame(test_stat = test_result$test.stat.scale,
repeat_index = repeat_index,
method = 'weighted+split'))
